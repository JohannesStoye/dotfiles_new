set nocompatible              " be iMproved, required
filetype off                  " required
set nofoldenable
let mapleader = "\<Space>"
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
set spelllang=en,de


Plugin 'VundleVim/Vundle.vim'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'ascenator/L9', {'name': 'newL9'}

Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"Plugin 'ervandew/supertab'
"Plugin 'davidhalter/jedi-vim'

Plugin 'Tagbar'
Plugin 'Auto-Pairs'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'terryma/vim-multiple-cursors'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'easymotion/vim-easymotion'
" Making math , average stuff easier, mark stuff in visual mode press ++
Plugin 'nixon/vim-vmath'
Plugin 'fisadev/dragvisuals.vim'

" Text completion
Bundle 'Valloric/YouCompleteMe'
Plugin 'unterzicht/vim-virtualenv'
" Snippets
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'Syntastic'


" Markdown
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'


" themes
Plugin 'chriskempson/base16-vim'
Plugin 'cdmedia/itg_flat_vim'
Plugin 'morhetz/gruvbox'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:

" -----------------------------------------------------------------------
" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Super Nice YouCompleteMe IDE shit
nnoremap <leader>x :YcmCompleter GoToReferences<CR>
nnoremap <leader>s :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>d :YcmCompleter GetDoc<CR>

" Settings for integration with Airline
let g:ycm_error_symbol = '!!'
let g:ycm_warning_symbol = '>>'

map <leader>n <C-X><C-K>

" Additional autocomplete settings
let g:ycm_complete_in_comments = 0
let g:ycm_complete_in_strings = 1


"UltiSnips Snippets
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" make shit nice
syntax on
let python_highlight_all=1

let base16colorspace=256
colorscheme gruvbox
set background=dark
set nocompatible

" Add line numbers
set number
set cursorline
set relativenumber

set wrap
set linebreak
set nolist  " list disables linebreak

"collapse and fold
"set foldmethod=indent
"set foldlevel=99
"nnoremap <space> za
" Setting a vertical ruler at char x
" set colorcolumn=85
set clipboard=unnamed

set tabstop=3
" set encoding
set encoding=utf-8
" faster redrawing
set ttyfast

" Whitespace stuff
set nowrap
set tabstop=3
set shiftwidth=3
set softtabstop=3
set expandtab

" autoload files when changed externally
set autoread

" remove crapy help
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" turn off normal arrow keys,
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>

"use ctags for tag integration
command! MakeTags !ctags -R .
" use ^] to jump to tag
" use g^] for ambiguous tags
" use ^t to jump back up the tag stack

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

" Show trailing spaces and highlight hard tabs
set list listchars=tab:»·,trail:·

" Strip trailing whitespaces on each save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()


" Airline config
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
"set guifont=Sauce\ Code\ Powerline\ Semibold:h11
set guifont=Fira\ Mono:h11
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
set fillchars+=stl:\ ,stlnc:\
set laststatus=2
set ttimeoutlen=50
let g:airline_theme='base16'

" configure search
set hlsearch
nnoremap <CR> :nohlsearch<CR><CR>
noremap <F3> :set hlsearch! hlsearch?<CR>

" filetype plugin indent on
filetype plugin on
filetype on

" Switch between splits
map <silent> <S-Right> <c-w>l
map <silent> <S-Left> <c-w>h
map <silent> <S-Up> <c-w>k
map <silent> <S-Down> <c-w>j

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" NerdTree Settings
map <F2> :NERDTreeToggle<CR>
map <silent> <C-F2> :NERDTree<CR><C-w>p:NERDTreeFind<CR>
autocmd BufEnter * lcd %:p:h

" ctrl p should ignore useless files
let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|pdf|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

if has("unix")
    let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps
endif
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

nmap <F8> :TagbarToggle<CR>

" Use vim as hexeditor
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END



" Syntastic Syntax Check
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_loc_list_height=3
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" Multi Cursor
" Default mapping
let g:multi_cursor_quit_key='<Esc>'

" Map start key separately from next key
let g:multi_cursor_start_key='<F6>'
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_start_word_key='g<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'

let g:EasyMotion_do_mapping = 0 " Disable default mappings
" " Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
nmap <C-f> <Plug>(easymotion-overwin-f)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

 " These `n` & `N` mappings are options. You do not have to map `n` & `N` to
 " Without these mappings, `n` & `N` works fine. (These mappings just provide
 " different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)")

" Stop highlighting after search with esc
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[] ]


" Keymaping for dragvisual
vmap <expr> H DVB_Drag('left')
vmap <expr> J DVB_Drag('down')
vmap <expr> K DVB_Drag('up')
vmap <expr> L DVB_Drag('right')
vmap <expr> D DVB_Duplicate()

let g:ycm_python_binary_path = '/home/jon/.virtualenvs/angr/bin/python2'
